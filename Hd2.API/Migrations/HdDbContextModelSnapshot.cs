// <auto-generated />
using System;
using Hd2.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hd2.API.Migrations
{
    [DbContext(typeof(HdDbContext))]
    partial class HdDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hd2.API.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Adresy");
                });

            modelBuilder.Entity("Hd2.API.Models.Complication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Komplikacje");
                });

            modelBuilder.Entity("Hd2.API.Models.DoctorProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorPesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPesel");

                    b.HasIndex("ProcedureId");

                    b.ToTable("LekarzZabieg");
                });

            modelBuilder.Entity("Hd2.API.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Szpitale");
                });

            modelBuilder.Entity("Hd2.API.Models.Organ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DonorPesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("HarvestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganTypeId")
                        .HasColumnType("int");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DonorPesel");

                    b.HasIndex("OrganTypeId");

                    b.ToTable("Narzady");
                });

            modelBuilder.Entity("Hd2.API.Models.OrganType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypyOrganow");
                });

            modelBuilder.Entity("Hd2.API.Models.Person", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Pesel");

                    b.HasIndex("AddressId");

                    b.ToTable("Osoby");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Hd2.API.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("OrganId")
                        .HasColumnType("int");

                    b.Property<string>("PatientPesel")
                        .IsRequired()
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("OrganId")
                        .IsUnique();

                    b.HasIndex("PatientPesel");

                    b.ToTable("Zabiegi");
                });

            modelBuilder.Entity("Hd2.API.Models.Doctor", b =>
                {
                    b.HasBaseType("Hd2.API.Models.Person");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Pwz")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("HospitalId");

                    b.HasIndex("Pwz")
                        .IsUnique()
                        .HasFilter("[Pwz] IS NOT NULL");

                    b.ToTable("Lekarze");
                });

            modelBuilder.Entity("Hd2.API.Models.Donor", b =>
                {
                    b.HasBaseType("Hd2.API.Models.Person");

                    b.Property<bool>("AliveDuringExtraction")
                        .HasColumnType("bit");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ToTable("Dawcy");
                });

            modelBuilder.Entity("Hd2.API.Models.Patient", b =>
                {
                    b.HasBaseType("Hd2.API.Models.Person");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ToTable("Pacjenci");
                });

            modelBuilder.Entity("Hd2.API.Models.Complication", b =>
                {
                    b.HasOne("Hd2.API.Models.Procedure", "Procedure")
                        .WithMany("Complications")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Hd2.API.Models.DoctorProcedure", b =>
                {
                    b.HasOne("Hd2.API.Models.Doctor", "Doctor")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("DoctorPesel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hd2.API.Models.Procedure", "Procedure")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Hd2.API.Models.Hospital", b =>
                {
                    b.HasOne("Hd2.API.Models.Address", "Address")
                        .WithOne("Hospital")
                        .HasForeignKey("Hd2.API.Models.Hospital", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hd2.API.Models.Organ", b =>
                {
                    b.HasOne("Hd2.API.Models.Donor", "Donor")
                        .WithMany("Organs")
                        .HasForeignKey("DonorPesel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hd2.API.Models.OrganType", "OrganType")
                        .WithMany("Organs")
                        .HasForeignKey("OrganTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Donor");

                    b.Navigation("OrganType");
                });

            modelBuilder.Entity("Hd2.API.Models.Person", b =>
                {
                    b.HasOne("Hd2.API.Models.Address", "Address")
                        .WithMany("People")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Hd2.API.Models.Procedure", b =>
                {
                    b.HasOne("Hd2.API.Models.Hospital", "Hospital")
                        .WithMany("Procedures")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hd2.API.Models.Organ", "Organ")
                        .WithOne("Procedure")
                        .HasForeignKey("Hd2.API.Models.Procedure", "OrganId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hd2.API.Models.Patient", "Patient")
                        .WithMany("Procedures")
                        .HasForeignKey("PatientPesel")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Organ");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hd2.API.Models.Doctor", b =>
                {
                    b.HasOne("Hd2.API.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Hd2.API.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Hd2.API.Models.Doctor", "Pesel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Hd2.API.Models.Donor", b =>
                {
                    b.HasOne("Hd2.API.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Hd2.API.Models.Donor", "Pesel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hd2.API.Models.Patient", b =>
                {
                    b.HasOne("Hd2.API.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Hd2.API.Models.Patient", "Pesel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hd2.API.Models.Address", b =>
                {
                    b.Navigation("Hospital")
                        .IsRequired();

                    b.Navigation("People");
                });

            modelBuilder.Entity("Hd2.API.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Procedures");
                });

            modelBuilder.Entity("Hd2.API.Models.Organ", b =>
                {
                    b.Navigation("Procedure")
                        .IsRequired();
                });

            modelBuilder.Entity("Hd2.API.Models.OrganType", b =>
                {
                    b.Navigation("Organs");
                });

            modelBuilder.Entity("Hd2.API.Models.Procedure", b =>
                {
                    b.Navigation("Complications");

                    b.Navigation("DoctorProcedures");
                });

            modelBuilder.Entity("Hd2.API.Models.Doctor", b =>
                {
                    b.Navigation("DoctorProcedures");
                });

            modelBuilder.Entity("Hd2.API.Models.Donor", b =>
                {
                    b.Navigation("Organs");
                });

            modelBuilder.Entity("Hd2.API.Models.Patient", b =>
                {
                    b.Navigation("Procedures");
                });
#pragma warning restore 612, 618
        }
    }
}
